// Continuous time Markov chains
ctmc

// initial count of the healthy individuals
const int init_z = 95;
// initial count of the infected individuals
const int init_n = 5;
// initial count of the healed individuals
const int init_u = 0;
// initial count of the partially healed individuals
const int init_p = 0;
// overall count of the individuals in the population
const int sum_individuals = init_z + init_n + init_u + init_p;

// rate of the infection - k_i \in [0.001, 0.011]
const double k_i;
// rate of the healing - k_r \in [0.01, 0.11]
const double k_r;
// rate of the partial healing - k_p \in [0.005, 0.055]
const double k_p;
// rate of the totally healing from partial healing - k_t \in [0.001, 0.011]
// const double k_t;

// Transition rates according to Mass action kinetics
formula r_i = z * n * k_i;
formula r_pi = z * p * (k_i / 2);
formula r_r = n * k_r;
formula r_pr = n * k_p;
// formula r_tr = p * k_t;

module cov20
   z: [0..sum_individuals] init init_z; // healthy individuals
   n: [0..sum_individuals] init init_n; // infected individals  
   u: [0..sum_individuals] init init_u; // healed individuals
   p: [0..sum_individuals] init init_p; // partially healed individuals

   // Z + N -> (|Z| * |N| * k_i) N + N 
   [] (z > 0) & (n > 0) & (n < sum_individuals) -> r_i : (z'=z-1) & (n'=n+1);
   // N -> (|N| * k_r) U
   [] (n > 0) & (u < sum_individuals) -> r_r : (u'=u+1) & (n'=n-1);
   // Z + P -> (|Z| * |P| * (k_i / 2) N + P)
   [] (z > 0) & (n > 0) & (n < sum_individuals) & (p > 0) -> r_pi : (z'=z-1) & (n'=n+1);
   // N -> (|N| * k_p) P
   [] (n > 0) & (p < sum_individuals) -> r_pr : (p'=p+1) & (n'=n-1);
   // P -> (|P| * k_t) U (4b solution)
   // [] (p > 0) & (u < sum_individuals) -> r_tr : (p'=p-1) & (u'=u+1);
endmodule
